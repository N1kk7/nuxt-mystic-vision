

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_URL")
}


model Callback {
  id            String   @id @default(uuid())
  name          String
  email         String   
  phone         String
  dateCallback  DateTime 
  timeSlot      String
  contactMethod ContactMethod @default(GOOGLE_MEET)
  comment       String?   
  status        Status     @default(WAITING_CALL)
  discountEndAt DateTime? 
  timeZone      String?
  country       String?
  language      String?
  createdAt     DateTime   @default(now())
  reservations  CallbackReservation[]
}

model CallbackReservation {
  id        String   @id @default(uuid())
  date      DateTime
  time      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  callback  Callback? @relation(fields: [callbackId], references: [id])
  callbackId String?
}

enum Status {
  WAITING_CALL
  PURCHASED
}

enum ContactMethod {
  PHONE_CALL
  GOOGLE_MEET
  SOMEWHERE_ELSE
}


model User {
  id          String      @id @default(cuid())
  email       String      @unique
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  stripeCustomerId  String

  subscriptions Subscription[]
  payments      Payment[]
}

model Subscription {
  id                String      @id @default(cuid())
  stripeId          String      @unique 
  userId            String? 
  email             String    
  status            SubscriptionStatus
  startDate         DateTime
  currentPeriodEnd  DateTime
  createdAt         DateTime
  updatedAt         DateTime

  user              User?       @relation(fields: [userId], references: [id])
  payments          Payment[]
}



model Payment {
  id                String      @id @default(cuid())
  stripeId          String      @unique
  subscriptionId    String?
  userId            String?
  amount            Int
  currency          String      @default("usd")    
  status            PaymentStatus
  paidAt            DateTime


  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  user              User?         @relation(fields: [userId], references: [id])

}

model SubscriptionPlan {
  id                String      @id @default(cuid())
  subName           String
  monthlyAmount     Int
  yearlyAmount      Int
  subDescription    String?
  paymentLink       String
  subStatus         SubscriptionPlanStatus
  
}

enum SubscriptionStatus {

  active
  trialing
  past_due
  canceled
  incomplete

}

enum SubscriptionPlanStatus {

  active
  deactivate

}

enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
}



